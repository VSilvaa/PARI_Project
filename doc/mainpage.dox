/** @mainpage Desenvolvimento de Interface Gráfica em Comunicação com um Sistema Remoto
 *
 * @section DescricaoGeral_sec Descrição Geral
 *
 * No âmbito da unidade curricular de Projeto em Automação e Robótica Industrial, como projeto final, foi proposto o desenvolvimento de uma interface gráfica em GTK que interagisse com um utilizador. A interface deverá representar, em tempo real, informações remotas recolhidas de um sistema remoto, deverá ainda ter a capacidade de controlar outras grandezas do mesmo sistema. Para tal é necessário estabelecer uma comunicação entre a interface e o sistema remoto num suporte RS232 ou TCP/IP. Deverá ser desenvolvida na linguagem de programação C e utilizar o ambiente de compilação CMake.
 * 
 * @author  Vítor Augusto Silva 67612
 *
 * @section DescricaoProjeto_sec Descrição do Projeto
Dadas as circunstâncias pensou-se em desenvolver uma interface em GTK 3.0 para controlo e monitorização do Robot Fanuc LR Mate 200 iD que será um dos objetos de estudo do autor no seu tema de dissertação. A aplicação deveria ser capaz de ler o valor das juntas e/ou coordenadas absolutas e monitorizar o estado de saídas digitais específicas. Associado ao controlo, deveria ainda executar determinados programas em linguagem TP previamente criados no controlador do robot e enviar o robot para determinados valores de juntas ou coordenadas absolutas.
Para que isto fosse possível teria que se comunicar em tempo real com o controlador do referido robot. A comunicação utilizaria o protocolo ModBus TCP/IP para, desta forma, trocar informações entre interface e o sistema remoto.
Acontece que o referido robot presente no Laboratório de Automação e Robótica não tem implementado o protocolo que se pretendia utilizar. A alternativa passava por usar um simulador (Roboguide) em que o protocolo é de fácil implementação e é possível a simulação de todas as funções do robot e seu controlador, no entanto, o simulador foi desenvolvido para para o sistema operativo windows, usa portas default que não são configuráveis e só é possível aceder ao software através de ip's internos o que inviabilizou a sua utilização. Como tal optou-se por utilizar um servidor ModBus genérico com a porta configurável que permite a utilização de todas as funções suportadas pelo ModBus e simula perfeitamente o servidor Modbus que se pretendia aceder no controlador ou no software Roboguide.

 * @section Protocolo_sec Protocolo ModBus TCP/IP
Dado que este protocolo é o único meio de troca de informação entre a aplicação desenvolvida e a unidade remota importa dar a conhecer um pouco sobre a sua estrutura das mensagens trocadas em suporte físico Ethernet e ainda a estrutura das mensagens ModBus TCP/IP em específico. As imagens que se seguem ilustram as referidas estruturas, respetivamente.

\image html mod1.PNG "Costrução dum pacote de dados TCP/IP - Ethernet"

Como podemos ver na figura cada mensagem transferida no meio físico Ethernet e inserida no protocolo TCP/IP tem encapsuladas várias camadas ou sub mensagens. Cada uma dessas camadas tem informações diferentes como por exemplo o ip ou a porta a quem se destina a mensagem.

\image html mod2.jpg "Construção dum pacote de dados ModBus TCP/IP"

A imagem anterior mostra a estrutura de uma mensagem MosBus TCP/IP que fica inserida na primeira camada (ADU - Application Data Unit) do pacote de dados Ethernet. Para efetivar a comunicação que era necessária ao trabalho foi importante perceber esta estrutura e suas pequenas variâncias. Só dessa forma foi possível a criação de uma biblioteca de geração de mensagens que quando lidas pelo servidor ModBus desempenhavam funções espeçíficas como alterar o estado de variáveis booleanas ou retornar determinados valores de registos.

 * @section Arquitetura_sec Arquitetura do Programa
O programa é constituído por dois ficheiros com código fonte main.c e callbacks.c e por uma header file myf.h. A melhor arquitetura encontrada para a realização deste projeto foi a utilização de dois processos, um responsável por mostrar a interface e encaminhar todos os eventos gerados para as callbacks correspondentes (processo pai) e outro responsável pela comunicação entre a aplicação e o sistema remoto (processo filho). O segundo apenas é chamado aquando o utilizador prime o botão Connect, iniciando nesse instante o processo e a comunicação. 
 * Os processos estão ligados por uma memória partilhada que tem a função de ligar os referidos processos através da leitura e escrita organizada da memória. Ambos os processos utilizam a biblioteca VS_Modbus, desenvolvida pelo autor, e que está encarregue de diversas funções descritas de seguida. 
 * Uma particularidade discutível do código do projeto é que o botão 6 (Connect) do ficheiro callbacks.c é responsável pela biforcação dos processos ficando um responsável pela interface e o segundo (filho) responsável pela ligação tcp/ip ao servidor modbus. Deste modo o botão 6 fica responsável por importantes tarefas. O autor optou por não passar nem a criação da memória partilhada nem o estabelecimento da ligação tcp/ip para funções pois, desta forma, teria que se criar um novo ficheiro de suporte ao main.c com apenas essas funções ou incluir as referidas funções na biblioteca gerada, o que não seria uma boa prática pois ficaria com imensos parâmetros de entrada. Pensou-se que a iclusão de todo o código responsável pela biforcação de processos, criação da shared memory e estabelecimento de ligação tcp/ip deveria estar incluído diretamente na callback pois desta forma ficava mais claro para um leitor que fosse analisar o código ou alterá-lo. Como ponto negativo a callback associada ao clique no botão 6 ficou bastante extensa o que diverge as opiniões de programador para programador.

O diagrama seguinte sintetiza a descrição efetuada.
\image html arq.png "Diagrama ilustratido da Arquitetura do programa"

 * @section Memória_sec Memória Partilhada
 * Para estabelecer a ligação entre os dois processos foi necessária a criação de uma memória partilhada pelos dois processos. Ambos podem ler e escrever dentro dessa memória e desta forma, num processo organizado de leitura e escrita dos processos nessa memória consegue-se estabelecer uma espécie de comunicação e o armazenamento de dados partilhados ao mesmo tempo.
\code
typedef struct {  // Final Project Struct - Client Modbus TCP/IP
	char moving;
	char prg; 
	char mvjoints;
	char mvabs;
	char mvprg;
	char gtjoints;
	char gtabs;
	char connected;
	char ready;
	char signal;
	int J[6];
	int C[3];
} datastruct;
\endcode

 * @section Biblioteca_sec Biblioteca Criada

A biblioteca VS_Modbus foi criada de forma a consolidar os conhecimentos apreendidos nas aulas de PARI do ano letivo 2016/2017 sobre criação de bibliotecas dinâmicas. Foi ainda usada como forma de simplificação do código fonte usado no Projeto Final da Unidade Curricular. De entre as funções presentes na biblioteca destacam-se as funções de geração de mensagens modbus que desempenham uma determinada função quando enviadas para o Servidor. A referida biblioteca inclui outras bibliotecas que são necessárias para que as funções sejam executadas sem erros, para se estabelecer a ligação TCP/IP e ainda para manipulação de strigs e sua impressão na linha de comandos. Na biblioteca estão integradas as seguintes funções :

\code
int GetSharedMem ();
void InterceptCTRL_C(int a);
unsigned char *VS_Modbus_GtABS( datastruct *modbus);
unsigned char *VS_Modbus_GtJOI( datastruct *modbus);
unsigned char *VS_Modbus_GtValues( datastruct *modbus);
unsigned char *VS_Modbus_Idle( datastruct *modbus);
unsigned char *VS_Modbus_MSwitch( datastruct *modbus );
unsigned char *VS_Modbus_MvABS( datastruct *modbus);
unsigned char *VS_Modbus_MvJOI( datastruct *modbus);
unsigned char *VS_Modbus_MvPRG( datastruct *modbus, char prg);
unsigned char *VS_Modbus_WrABS( datastruct *modbus);
unsigned char *VS_Modbus_WrJOI( datastruct *modbus);
void VS_PrintMessages(char *buf , int length , char* type);
void VS_ReadCoords( datastruct *modbus , char *ibuf );
void VS_ReadJoints ( datastruct *modbus , char *ibuf );
\endcode

 * @section Futuro_sec Trabalhos Futuros
\verbatim
1 - Instalação do protocolo ModBus TCP/IP no robot Fanuc LR Mate 200iD;
2 - Pequenas alterações no código e nas mensagens ModBus de forma a compatibilizar a aplicação para comunicação com o robot utilizando os registos disponíveis sem comprometer os que estão reservados.
\endverbatim

 * @section Agradecimentos_sec Agradecimentos
 * 	- Aos colegas da disciplina por toda a entreajuda, pelos momentos passados no Laboratório de Automação e Robótica e pela moralização nos momentos mais difíceis;
 * 	- Ao Eng. Rui Cancela da Motofil pelos vários esclarecimentos sobre o protocolo utilizado, pela documentação fornecida e pelas informaçõs acerca dos robôs Fanuc;
 * 	- Ao docente da disciplina pelo correto ensino da lingugem de Programação C, base de desenvolvimento deste Projeto, e pela disponibilidade para o esclarecimento de dúvidas aos alunos.
 * 
*/
